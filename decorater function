# simple method to define decorator(func)
def decorator(func):
    def wrapper(*auto_writing, **kw):
        return func()
    return wrapper
    
    
# 使用偏函数与类实现装饰器
import time
import functools

class AutoWritingFunc:
    def __init__(self,  duration, func):
        self.duration = duration
        self.func = func

    def __call__(self, *auto_writing, **kwargs):
        print(f'Wait for {self.duration} seconds...')
        time.sleep(self.duration)
        return self.func(*auto_writing, **kwargs)

    def eager_call(self, *auto_writing, **kwargs):
        print('Call without delay')
        return self.func(*auto_writing, **kwargs)

def delay(duration):
    """
    装饰器：推迟某个函数的执行。
    同时提供 .eager_call 方法立即执行
    """
